<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<htb.devfx>
		<objects>
			<typeAliases>
				<add name="IExceptionService" type="HTB.DevFx.Exceptions.IExceptionService, HTB.DevFx.BaseFx" />
				<add name="IExceptionHandler" type="HTB.DevFx.Exceptions.IExceptionHandler, HTB.DevFx.BaseFx" />
				<add name="IExceptionFormatter" type="HTB.DevFx.Exceptions.IExceptionFormatter, HTB.DevFx.BaseFx" />
			</typeAliases>

			<object name="ExceptionService" type="IExceptionService" mapTo="HTB.DevFx.Exceptions.ExceptionService, HTB.DevFx" setting="{name:'../../exception', type:'HTB.DevFx.Exceptions.Config.ExceptionServiceSetting, HTB.DevFx'}">
				<lifetime type="Singleton" />
			</object>

			<namespace>
				<objects name="ExceptionHandlers" configSet="{tag:'object'}">
					<object name="DefaultExceptionFormatter" type="IExceptionFormatter" mapTo="HTB.DevFx.Exceptions.ExceptionFormatter, HTB.DevFx">
						<lifetime type="Singleton" />
					</object>

					<object name="WebExceptionFormatter" type="IExceptionFormatter" mapTo="HTB.DevFx.Exceptions.Web.HttpWebExceptionFormatter, HTB.DevFx">
						<lifetime type="Singleton" />
					</object>

					<object name="WebHandler" type="IExceptionHandler" mapTo="HTB.DevFx.Exceptions.Web.HttpWebExceptionHandler, HTB.DevFx">
						<lifetime type="Singleton" />
						<constructor configSet="{tag:'parameter'}">
							<parameter name="logService" type="ILogService" value="@LogService" />
							<parameter name="ExceptionFormatter" type="IExceptionFormatter" value="@WebExceptionFormatter" />
						</constructor>
						<properties configSet="{tag:'property'}">
							<!--<property name="DefaultRedirectUrl" type="string" value="" />-->
							<!--<property name="CheckRedirectFileExists" type="bool" value="false" />-->
							<!--<property name="CustomEnabled" type="bool" value="false" />-->
							<!--<property name="CustomLocal" type="string" value="192.168.,10.0.,172." />-->
							<property name="IgnoreHttpCodes" type="string" value="404" />
							<property name="DefaultErrorMessage" type="string">
								<![CDATA[<!DOCTYPE html><html><body>
								<style type="text/css">
									body, hr, a, font, div, p, table, td, th, span {{font-size: 9pt; font-family: simsun}}
								</style>
								<h1 style="color:red">ERROR OCCURRED!</h1>
								<hr style="height:1px" />
								<b>An unkown error occurred, please try again! error log has been saved, and also sent to webmaster.</b><br />
								<br />
								<a href="#" onclick="history.back()">[BACK]</a>
								<hr style="height:1px" />
								<font onclick="document.all('DETAIL').style.display=''" style="cursor:hand;color:red">
									Error message: {0}
								</font>
								<div id="DETAIL" style="display:none;color:red">
									Url: {1}<br>
									Stack:<br>
									<pre>{2}</pre>
								</div></body></html>]]>
							</property>
						</properties>
					</object>

					<object name="DefaultHandler" type="IExceptionHandler" mapTo="HTB.DevFx.Exceptions.ExceptionHandler, HTB.DevFx">
						<lifetime type="Singleton" />
						<constructor configSet="{tag:'parameter'}">
							<parameter name="logService" type="ILogService" value="@LogService" />
							<parameter name="ExceptionFormatter" type="IExceptionFormatter" value="@DefaultExceptionFormatter" />
						</constructor>
					</object>
				</objects>
			</namespace>
		</objects>

		<exception enabled="false">
			<handlers>
				<add name="WebHandler" type="@ExceptionHandlers.WebHandler" enabled="true" />
				<add name="DefaultHandler" type="@ExceptionHandlers.DefaultHandler" enabled="true" />
			</handlers>
		</exception>

		<httpModules>
			<add name="ExceptionHttpModule" type="HTB.DevFx.Exceptions.Web.ExceptionHttpModule, HTB.DevFx" />
		</httpModules>
	</htb.devfx>
</configuration>